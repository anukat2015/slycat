/*
Copyright 2013, Sandia Corporation. Under the terms of Contract
DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains certain
rights in this software.
*/

///////////////////////////////////////////////////////////////////////////////////////////
// HTML5 DOM waveform visualization, for use with the timeseries model.

define("slycat-timeseries-waveformplot", ["d3", "knob"], function(d3, knob)
{
  $.widget("timeseries.waveformplot",
  {
    options:
    {
    	"server-root" : "",
      mid : null,
      waveforms : null, // Time & value data for all waveforms, not just the visible ones
      selection : undefined, // Array of ids of waveforms that are visible
      highlight : [],
      color_array : null,
      color_scale : null,
      nullWaveformColor: "gray",
      nullWaveformDasharray: "5,5",
    },

    _create: function()
    {
      var self = this;

      this.waveforms = this.options.waveforms;
      this.container = d3.select("#waveform-viewer");
      this.width = $("#waveform-pane").width();
      this.height = $("#waveform-pane").height();
      this.padding_top = 20;
      this.padding_right = 20;
      this.padding_bottom = 40;
      this.padding_left = 60;
      this.diagram_width = this.width - this.padding_right - this.padding_left;
      this.diagram_height = this.height - this.padding_top - this.padding_bottom;

      this.waveformPieContainer = $("#waveform-progress");
      this.waveformPie = $("#waveform-progress .waveformPie")
      this.waveformPie.knob({
                    'min':0,
                    'readOnly':true,
                    'displayInput':false,
                    'fgColor':'#7767B0',
                    'bgColor':'#DBD9EB',
                    'width':200,
                    'height':200,
                    'thickness':0.35,
                    'step':1,
                  });
      this.waveformProcessingTimeout = null;
      this.previewWaveformsTimeout = null;
      this.showWaveformPieContainerTimeout = null;
      this.color_array = this.options.color_array;
      this.color_scale = this.options.color_scale;

      this.container.selectAll("g").remove();

      this.visualization = this.container.append("svg:g")
        .attr("transform", "translate(" + this.padding_left + "," + this.padding_top + ")")
        ;

      this.rect = this.visualization.append("svg:rect")
        .attr("width", this.diagram_width)
        .attr("height", this.diagram_height)
        .attr("pointer-events", "all")
        .style("fill", "transparent")
        .on("click", function(d){
          // unselect all the waveforms when someone clicks in the panel but not on a waveform. 
          // But only if they are regular clicking. Ctrl+click probably means they're trying to select another waveform.
          if(!d3.event.ctrlKey && !d3.event.metaKey) {
            self.options.highlight = [];
            self._select();
            self.element.trigger("waveform-selection-changed", [self.options.highlight]);
          }
        }) 
  //            .call(d3.behavior.zoom().x(this.x).y(this.y).on("zoom", redraw_waveforms));
        ;

      this.x_axis_layer = this.container.append("g").attr("class", "x-axis");
      this.y_axis_layer = this.container.append("g").attr("class", "y-axis");

      // this.canvas_datum = d3.select(self.element.parent().get(0)).append("canvas")
      this.canvas_datum = d3.select(self.element.parent().get(0)).insert("canvas", ":first-child")
        .style({
          'position':'absolute',
          'left':this.padding_left + 'px',
          'top':this.padding_top + 'px'
        })
        .node()
        ;

      // alpha true or false doesn't seem to make any difference at 15k waveforms x 1000 samples
      this.canvas_datum_layer = this.canvas_datum.getContext("2d", {alpha:true});

      this.canvas_selection = d3.select(self.element.parent().get(0)).append("canvas")
        .style({
          'position':'absolute',
          'left':this.padding_left + 'px',
          'top':this.padding_top + 'px'
        })
        .node()
        ;
      this.canvas_selection_layer = this.canvas_selection.getContext("2d", {alpha:true});

      this.canvas_offscreen = document.createElement('canvas');
      this.canvas_offscreen_layer = this.canvas_offscreen.getContext('2d', {alpha:true});

      this.canvas_picker = document.createElement('canvas');
      this.canvas_picker_layer = this.canvas_picker.getContext('2d', {alpha:true});


      // this.canvas_selected = d3.select(self.element.parent().get(0)).append("canvas")
      //   .style({
      //     'position':'absolute',
      //     'left':this.padding_left + 'px',
      //     'top':this.padding_top + 'px'
      //   })
      //   .node()
      //   ;
      // this.canvas_selected_layer = this.canvas_selected.getContext("2d");

      // Set all waveforms to visible if this options has not been set
      var visible = this.options.selection;
      if(visible === undefined) {
        visible = [];
        for(var i=0; i<this.waveforms.length; i++) {
          visible.push(this.waveforms[i]["input-index"]);
        }
        this.options.selection = visible;
      }

      this._set_visible();
      this._select();
    },

    // Renders waveforms
    _set_visible: function(){
      var self = this;
      var visible = this.options.selection;
      this.waveforms = this.options.waveforms;

      // Cancel any previously started work
      self._stopProcessingWaveforms();

      var x_min = d3.min(this.waveforms, function(waveform) { return d3.min(waveform["time"]); });
      var x_max = d3.max(this.waveforms, function(waveform) { return d3.max(waveform["time"]); });
      var y_min = d3.min(this.waveforms, function(waveform) { return d3.min(waveform["value"]); });
      var y_max = d3.max(this.waveforms, function(waveform) { return d3.max(waveform["value"]); });

      this.x = d3.scale.linear()
        .domain([x_min, x_max])
        .range([0, this.diagram_width])
        ;

      this.y = d3.scale.linear()
        .domain([y_max, y_min])
        .range([0, this.diagram_height])
        ;

      this.x_axis = d3.svg.axis().scale(this.x).orient("bottom");
      this.x_axis_layer
          .attr("transform", "translate(" + (this.padding_left - 1) + "," + (this.padding_top + this.diagram_height + 1) + ")")
          .call(this.x_axis)
          ;

      this.y_axis = d3.svg.axis().scale(this.y).orient("left");
      this.y_axis_layer
          .attr("transform", "translate(" + (this.padding_left - 1) + "," + (this.padding_top + 1) + ")")
          .call(this.y_axis)
          ;

      d3.selectAll("canvas")
        .attr("width", this.diagram_width)
        .attr("height", this.diagram_height)
        ;

      this.canvas_offscreen.width = this.diagram_width;
      this.canvas_offscreen.height = this.diagram_height;

      this.canvas_picker.width = this.diagram_width;
      this.canvas_picker.height = this.diagram_height;

      var waveform_subset = [];
      if(visible !== undefined) {
        for(var i=0; i<visible.length; i++)
        {
          waveform_subset.push(self.waveforms[visible[i]])
        }
      }
      else {
        waveform_subset = self.waveforms;
      }

      function intToRGB(int)
      {
        var r = (int >> 16) & 0xff;
        var g = (int >> 8) & 0xff;
        var b = int & 0xff;
        return d3.rgb(r, g, b);
      }
      function RGBtoInt(r, g, b)
      {
        return r<<16 | g<<8 | b;
      }

      var mouseStoppedTimer = null;
      function mouseStopped(event) {
        clearTimeout(mouseStoppedTimer);
        mouseStoppedTimer=setTimeout(pick, 500, event);
      }
      function pick(event) {
        var x = event.layerX;
        var y = event.layerY;

        var pixel = self.canvas_datum_layer.getImageData(x, y, 1, 1);
        var data = pixel.data;
        var rgba = 'rgba(' + data[0] + ',' + data[1] +
                   ',' + data[2] + ',' + data[3] + ')';
        // console.log("visible layer: " + rgba);

        // console.time('searching through canvases');
        // var canvas, canvas_pixel;
        // for(var i=canvases.length-1; i > -1; i--)
        // {
        //   canvas = canvases[i];
        //   canvas_pixel = canvas.getImageData(x, y, 1, 1);
        // }
        // console.timeEnd('searching through canvases');

        var pixelPick = self.canvas_picker_layer.getImageData(x, y, 1, 1);
        var dataPick = pixelPick.data;
        var rgbaPick = 'rgba(' + dataPick[0] + ',' + dataPick[1] +
                   ',' + dataPick[2] + ',' + dataPick[3] + ')';
        // console.log("pick layer: " + rgbaPick);

        var id, isPointInStrokeVisible, isPointInStrokePick, path;
        if(dataPick[3]==255)
        {
          id = RGBtoInt(dataPick[0], dataPick[1], dataPick[2]);
          // console.log('you are hovering over waveform with id ' + id);

          path = paths[id];

          isPointInStrokeVisible = self.canvas_datum_layer.isPointInStroke(path, x, y);
          isPointInStrokePick = self.canvas_picker_layer.isPointInStroke(path, x, y);

          if(isPointInStrokePick)
          {
            self.options.highlight = [id];
            self._select();
          }
        }
        else
        {
          // Only clear highlight if there is something highlighted
          if(self.options.highlight.length > 0)
          {
            self.options.highlight = [];
            self._select();
          }
        }

      }
      //this.canvas_datum.addEventListener('mousemove', mouseStopped);
      this.canvas_selection.addEventListener('mousemove', pick);

      this.canvas_datum_layer.lineWidth = 1;
      this.canvas_offscreen_layer.lineWidth = 1;
      this.canvas_picker_layer.lineWidth = 3;

      var result, current_waveform, p, strokeStyle, paths=[];

      var multiplier = 1;
      console.log('rendering ' + waveform_subset.length * multiplier + ' waveforms');
      console.log('each one has ' + waveform_subset[0]["time"].length + ' samples');

      console.time('canvas render');
      for(var k=0; k < multiplier; k++)
      {
      var waveform_subset_length = waveform_subset.length;
      var color_scale_and_color_array = self.options.color_scale != null && self.options.color_array != null;
      for(var j=0; j<waveform_subset_length; j++)
      {
        result = "";
        current_waveform = waveform_subset[j];
        current_waveform_length = current_waveform["time"].length;

        // for(var i = 0; i != current_waveform_length; ++i)
        // {
        //   result += "M" + self.x(current_waveform["time"][i]) + "," + self.y(current_waveform["value"][i]);
        //   break;
        // }
        // for(var i = 1; i < current_waveform_length; ++i)
        // {
        //   result += "L" + self.x(current_waveform["time"][i]) + "," + self.y(current_waveform["value"][i]);
        // }
        // p = new Path2D(result);

        // p = new Path2D("M0,428.3309985504867L1.0190190190190187,423.24420695066834L2.038038038038038,418.18370943880495L3.0570570570570568,413.16008425605054L4.076076076076076,408.18382743504236L5.095095095095095,403.2653294194606L6.1141141141141135,398.41485193470396L7.133133133133133,393.64250516461374L8.152152152152151,388.9582252884076L9.17117117117117,384.3717524310757L10.19019019019019,379.892609079449L11.209209209209208,375.5300790149772L12.228228228228227,371.29318681295024L13.247247247247245,367.1906779564722L14.266266266266266,363.23099961194964L15.285285285285285,359.4222821111896L16.304304304304303,355.7723211834301L17.323323323323322,352.28856097873785L18.34234234234234,348.97807792222306L19.36136136136136,345.8475654364368L20.38038038038038,342.90331956713896L21.399399399399396,340.15122554536276L22.418418418418415,337.59674531635847L23.437437437437435,335.2449060635827L24.456456456456454,333.1002897534129L25.475475475475474,331.167023723724L26.494494494494493,329.4487723368579L27.513513513513516,327.94872971487445L28.53253253253253,326.6696135722787L29.55155155155155,325.6136601586984L30.57057057057057,324.7826203212348L31.589589589589586,324.1777566934428L32.608608608608606,323.7998420151123L33.627627627627625,323.64915858423865L34.646646646646644,323.7254988397856L35.66566566566566,324.02816707106837L36.684684684684676,324.55598224682694L37.7037037037037,325.30728195432744L38.72272272272272,326.27992743612305L39.74174174174174,327.47130970944187L40.76076076076076,328.8783567505494L41.77977977977977,330.497541723861L42.79879879879879,332.3248922330707L43.817817817817804,334.3560005691135L44.83683683683683,336.58603492740264L45.855855855855836,339.0097515644823L46.87487487487487,341.6215078620183L47.89389389389388,344.4152762639196L48.91291291291291,347.3846590503461L49.93193193193191,350.5229039104185L50.95095095095095,353.82292027361297L51.96996996996995,357.2772963580919L52.98898898898898,360.8783168926064L54.008008008008,364.6179814671071L55.02702702702702,368.4880234658148L56.046046046046044,372.4799295352447L57.065065065065056,376.58495953854265L58.08408408408408,380.79416694648665L59.103103103103095,385.09841961462814L60.122122122122114,389.48842089530405L61.14114114114113,393.95473103263964L62.16016016016016,398.48778878818405L63.179179179179165,403.0779332444779L64.1981981981982,407.71542573364974L65.2172172172172,412.3904718380634L66.23623623623622,417.09324341010506L67.25525525525524,421.81390055839967L68.27427427427426,426.5426135480762L69.29329329329327,431.26958456317055L70.31231231231232,435.9850692798456L71.33133133133131,440.6793981998386L72.35035035035034,445.3429976943891L73.36936936936935,449.96641070987914L74.38838838838838,454.5403170875071L75.4074074074074,459.0555534505299L76.42642642642642,463.50313261392716L77.44544544544544,467.8742624727761L78.46446446446444,472.16036432716L79.48348348348348,476.35309060307276L80.5025025025025,480.4443419305107L81.52152152152152,484.42628354176657L82.54054054054053,488.2913609548509L83.55955955955955,492.0323149089493L84.57857857857857,495.64219552088673L85.59759759759758,499.1143756337012L86.6166166166166,502.44256333061924L87.63563563563562,505.62081358997375L88.65465465465464,508.643539058902L89.67367367367366,511.5055199260051L90.6926926926927,514.2019128755259L91.7117117117117,516.7282591080115L92.73073073073071,519.0804914148614L93.74974974974974,521.2549402966114L94.76876876876877,523.2483391172617L95.78778778778778,525.0578282894289L96.80680680680679,526.6809584875577L97.82582582582582,528.115692888887L98.84484484484483,529.3604084442987L99.86386386386384,530.4138961836005L100.88288288288285,531.2753605621739L101.9019019019019,531.9444178582787L102.92092092092092,532.4210936326167L103.93993993993993,532.7058192640227L104.95895895895895,532.7994275773665L105.97797797797796,532.7031475819074L106.99699699699698,532.4185983404335L108.016016016016,531.9477819915451L109.03503503503502,531.2930759493921L110.05405405405403,530.4572243070486L111.07307307307308,529.4433284714978L112.09209209209209,528.2548370599045L113.1111111111111,526.8955350884639L114.13013013013011,525.3695324866334L115.14914914914914,523.6812519709728L116.16816816816817,521.8354163141374L117.18718718718718,519.8370350457798L118.20620620620619,517.6913906232253L119.2252252252252,515.4040241107832L120.24424424424423,512.9807204074418L121.26326326326324,510.4274930634707L122.28228228228225,507.7505687271132L123.3013013013013,504.95637126309987L124.32032032032032,502.05150558514146L125.33933933933933,499.04274124487745L126.35835835835833,495.9369958199514L127.37737737737736,492.74131814397384L128.3963963963964,489.4628714210978L129.4154154154154,486.1089162677887L130.43443443443442,482.6867937241169L131.45345345345342,479.2039082765291L132.47247247247245,475.6677109335817L133.49149149149147,472.08568239553597L134.5105105105105,468.4653163580281L135.5295295295295,464.81410298923714L136.54854854854852,461.13951261909153L137.56756756756758,457.4489796780696L138.58658658658658,453.7498869220777L139.6056056056056,450.04954997873165L140.62462462462463,446.3552022491186L141.64364364364366,442.6739801977961L142.66266266266263,439.012909062386L143.68168168168165,435.3788890126502L144.70070070070068,431.77868178740084L145.7197197197197,428.21889783600335L146.7387387387387,424.70598398957617L147.75775775775773,421.24621168529177L148.77677677677676,417.8456657654343L149.79579579579578,414.5102338710812L150.8148148148148,411.2455964484554L151.83383383383384,408.05721738414286L152.85285285285283,404.9503352834937L153.87187187187186,401.9299554046367L154.8908908908909,399.00084225862537L155.9099099099099,396.16751288432783L156.92892892892888,393.4342308047554L157.9479479479479,390.805000669616L158.96696696696696,388.28356358698124L159.98598598598596,385.8733931450668L161.005005005005,383.57769212326565L162.02402402402402,381.3993898897312L163.04304304304304,379.3411404810009L164.06206206206204,377.4053213573756L165.08108108108107,375.59403282603836L166.1001001001001,373.909098122207L167.11911911911912,372.3520641369765L168.13813813813815,370.92420277891887L169.15715715715714,369.6265129549861L170.17617617617614,368.45972315478656L171.19519519519517,367.4242946209116L172.21421421421417,366.52042508665096L173.2332332332332,365.74805306117736L174.25225225225222,365.1068626410904L175.27127127127125,364.5962888261054L176.29029029029027,364.2155233156387L177.30930930930933,363.9635207620951L178.3283283283283,363.83900545580235L179.34734734734732,363.84047841575307L180.36636636636638,363.9662248596297L181.38538538538535,364.21432202598197L182.4044044044044,364.5826473209112L183.4234234234234,365.06888676119297L184.44244244244243,365.6705436854331L185.46146146146145,366.38494770460665L186.48048048048045,367.2092638631723L187.49949949949948,368.14050198188926L188.5185185185185,369.1755261534802L189.5375375375375,370.3110643623959L190.55655655655653,371.5437182001266L191.57557557557556,372.8699726477806L192.59459459459458,374.2862058980149L193.6136136136136,375.78869918883413L194.6326326326326,377.3736466222959L195.65165165165163,379.03716494174904L196.67067067067066,380.77530324189576L197.68968968968966,382.58405258670183L198.70870870870866,384.45935551097847L199.72772772772768,386.3971153823207L200.74674674674674,388.3932056010097L201.76576576576576,390.4434786164643L202.7847847847848,392.54377473985363L203.8038038038038,394.68993073356376L204.82282282282281,396.8777881593293L205.84184184184184,399.10320146800456L206.86086086086084,401.36204581514244L207.87987987987987,403.6502245877813L208.8988988988989,405.96367662909046L209.91791791791792,408.2983831488048L210.93693693693692,410.65037430867426L211.95595595595591,413.0157354734595L212.97497497497494,415.3906131193279L213.99399399399397,417.77122039282045L215.01301301301297,420.15384231488576L216.032032032032,422.5348406257952L217.05105105105102,424.91065826806005L218.07007007007005,427.2778235057691L219.08908908908907,429.63295368004447L220.10810810810813,431.9727586015681L221.1271271271271,434.2940435823678L222.14614614614615,436.5937121102488L223.16516516516518,438.86876817043117L224.18418418418412,441.11631822008445L225.20320320320317,443.3335728225416L226.2222222222222,445.5178479490283L227.24124124124123,447.66656595674L228.26026026026025,449.77725625305777L229.27927927927925,451.8475556565909L230.29829829829828,453.87520846657986L231.3173173173173,455.8580662529843L232.3363363363363,457.79408738030537L233.35535535535533,459.68133627886243L234.37437437437436,461.5179824778457L235.39339339339338,463.3022994150093L236.4124124124124,465.03266303833783L237.4314314314314,466.7075502154315L238.4504504504504,468.3255369666917L239.46946946946943,469.88529653865857L240.48848848848846,471.3855973340579L241.50750750750746,472.8253007152463L242.52652652652648,474.2033586978086L243.54554554554554,475.5188115510629L244.56456456456456,476.7707853221543L245.5835835835836,477.95848930028524L246.6026026026026,479.0812134374306L247.6216216216216,480.13832574161404L248.64064064064064,481.12926965850386L249.65965965965964,482.05356145669055L250.67867867867866,482.9107876315641L251.69769769769766,483.70060234220796L252.7167167167167,484.42272489516495L253.73573573573572,485.07693728832425L254.7547547547547,485.66308182751936L255.77377377377377,486.18105882772426L256.7927927927928,486.63082440998386L257.81181181181176,487.0123884044344L258.8308308308308,487.32581236893986L259.8498498498498,487.5712077320175L260.86886886886884,487.74873406783763L261.88788788788787,487.85859751016983L262.9069069069069,487.9010493112172L263.9259259259259,487.87638455031896L264.9449449449449,487.7849409965433L265.963963963964,487.6270981282036L266.98298298298295,487.403276311354L268.002002002002,487.1139361383226L269.021021021021,486.75957792635927L270.04004004004,486.34074137548413L271.05905905905905,485.858005383655L272.078078078078,485.311988016399L273.09709709709705,484.7033466271172L274.1161161161161,484.03277812333323L275.1351351351351,483.30101937326236L276.15415415415407,482.50884774619067L277.17317317317315,481.6570817793153L278.1921921921922,480.74658196288084L279.2112112112112,479.77825163466713L280.2302302302302,478.75303797415296L281.24924924924926,477.67193308598536L282.26826826826823,476.5359751617316L283.2872872872873,475.3462497083003L284.3063063063063,474.10389083086164L285.32532532532525,472.81008255760344L286.34434434434434,471.4660601932219L287.3633633633633,470.07311168765574L288.3823823823824,468.6325790062532L289.40140140140136,467.1458594872921L290.4204204204204,465.61440717256795L291.4394394394394,464.0397340966271L292.45845845845844,462.42341152013825L293.4774774774774,460.767071092882L294.4964964964965,459.0724059318856L295.5155155155155,457.3411716003433L296.53453453453454,455.5751869731355L297.5535535535535,453.77633497500324L298.5725725725726,451.9465631777335L299.59159159159157,450.08788424307625L300.61061061061054,448.2023761985406L301.6296296296296,446.2921825336996L302.6486486486486,444.3595121051801L303.6676676676677,442.40663883911094L304.68668668668664,440.43590122045885L305.7057057057057,438.4497015593892L306.7247247247247,436.45050502554415L307.7437437437437,434.440838441939L308.76276276276275,432.42328883102465L309.7817817817818,430.40050170635885L310.80080080080074,428.37517910426186L311.8198198198198,426.35007735079654L312.8388388388388,424.3280045604179L313.8578578578578,422.31181786366454L314.87687687687685,420.30442036232273L315.8958958958958,418.30875781157016L316.9149149149149,416.32781502970414L317.9339339339339,414.36461203717107L318.95295295295296,412.4221999277348L319.9719719719719,410.5036564757493L320.990990990991,408.61208148463555L322.01001001001,406.7505918827883L323.029029029029,404.92231657426606L324.048048048048,403.1303910527297L325.0670670670671,401.37795178819914L326.0860860860861,399.6681303972774L327.10510510510517,398.0040476085563L328.12412412412414,396.38880703595186L329.1431431431431,394.82548877372466L330.1621621621622,393.3171428279129L331.1811811811811,391.866782399842L332.20020020020024,390.47737703826834L333.21921921921916,389.15184567756745L334.2382382382383,387.8930495801756L335.25725725725727,386.70378520224995L336.27627627627635,385.586777002206L337.2952952952953,384.5446702124329L338.3143143143143,383.58002359506713L339.33333333333337,382.695302203223L340.3523523523523,381.8928701695302L341.3713713713714,381.1749835442139L342.39039039039034,380.5437832052716L343.4094094094095,380.00128786354105L344.4284284284284,379.5493871856324L345.4474474474475,379.1898350577891L346.46646646646644,378.9242430137731L347.48548548548547,378.7540738498091L348.5045045045045,378.68063544950115L349.5235235235235,378.7050748414224L350.5425425425426,378.82837251179933L351.5615615615616,379.05133699434845L352.58058058058066,379.3745997588889L353.59959959959957,379.7986104198383L354.61861861861865,380.32363228511184L355.6376376376376,380.94973826528224L356.6566566566566,381.6768071621219L357.6756756756757,382.5045203548411L358.69469469469465,383.43235890146104L359.71371371371373,384.45960107181753L360.73273273273276,385.58532032767994L361.7517517517518,386.80838376440255L362.7707707707708,388.1274510273927L363.7897897897897,389.54097371549295L364.80880880880886,391.0471952821349L365.8278278278278,392.6441514438292L366.84684684684686,394.32967110422027L367.8658658658658,396.1013778005535L368.8848848848849,397.95669167798L369.9039039039039,399.89283199567444L370.92292292292296,401.90682016725003L371.94194194194193,403.9954833364474L372.9609609609609,406.15545848753635L373.97997997998004,408.3831970883191L374.99899899899896,410.67497026205854L376.0180180180181,413.02687448308154L377.037037037037,415.4348377892302L378.05605605605615,417.8946265027586L379.07507507507506,420.40185244970445L380.0940940940941,422.9519806662025L381.1131131131131,425.5403375786694L382.132132132132,428.16211964326175L383.15115115115117,430.81240242851663L384.17017017017014,433.4861501236145L385.1891891891892,436.17822545327334L386.2082082082082,438.8833999788919L387.22722722722733,441.59636476420883L388.24624624624624,444.3117413824495L389.2652652652652,447.02409324067867L390.2842842842843,449.7279371958952L391.30330330330327,452.41775543627045L392.32232232232235,455.0880075998714L393.3413413413413,457.73314310221434L394.3603603603604,460.34761364307235L395.3793793793793,462.92588586211195L396.39839839839846,465.4624541121712L397.4174174174174,467.9518533182977L398.4364364364364,470.38867189007266L399.4554554554555,472.7675646542244L400.47447447447445,475.08326577411805L401.49349349349353,477.33060162236586L402.5125125125125,479.50450357256983L403.5315315315316,481.60002067605654L404.55055055055055,483.61233218941743L405.5695695695696,485.5367599187101L406.5885885885886,487.36878034632616L407.6076076076076,489.10403650676324L408.6266266266266,490.7383495778873L409.64564564564563,492.2677301546996L410.6646646646647,493.6883891731628L411.6836836836837,494.99674845226497L412.70270270270277,496.18945082322836L413.72172172172174,497.2633698155871L414.7407407407407,498.21561887077L415.7597597597598,499.04356005482157L416.7787787787787,499.7448122429892L417.79779779779784,500.31725875007385L418.81681681681675,500.7590543817L419.8358358358359,501.06863188300014L420.85485485485486,501.2447077626161L421.8738738738739,501.2862874714145L422.8928928928929,501.19266991686044L423.91191191191183,500.9634512956209L424.93093093093097,500.5985282286478L425.9499499499499,500.0981001847299L426.968968968969,499.4626711802964L427.98798798798794,498.69305074508884L429.0070070070071,497.79035414520246L430.026026026026,496.7560018569156L431.0450450450451,495.59171828667644L432.06406406406404,494.29952973459433L433.08308308308307,492.8817616007802L434.1021021021021,491.3410348359007L435.12112112112106,489.6802616393316L436.1401401401402,487.9026404103288L437.1591591591591,486.01164995966457L438.17817817817826,484.01104299120163L439.19719719719717,481.9048388648836L440.21621621621625,479.6973156546193L441.2352352352352,477.3930015165011L442.2542542542542,474.9966653847416L443.2732732732733,472.5133070146144L444.2922922922923,469.94814639354826L445.31131131131133,467.3066125433446L446.33033033033036,464.5943317382487L447.3493493493494,461.81711516531925L448.36836836836835,458.9809460551877L449.3873873873873,456.09196631287455L450.4064064064064,453.15646267984675L451.4254254254254,450.1808524599282L452.44444444444446,447.1716688430274L453.4634634634634,444.1355458619182L454.4824824824825,441.079203018486L455.5015015015015,438.0094296169357L456.52052052052056,434.933068842456L457.53953953953953,431.8570016247175L458.5585585585585,428.7881303263761L459.57757757757764,425.7333622974374L460.59659659659656,422.6995933369123L461.61561561561564,419.6936911036649L462.6346346346346,416.7224785187068L463.6536536536537,413.79271720143714L464.67267267267266,410.9110909824585L465.6916916916917,408.0841895356099L466.7107107107107,405.3184921717608L467.7297297297297,402.6203518366916L468.74874874874877,399.9959793550547L469.76776776776774,397.4514279619619L470.7867867867868,394.9925781631838L471.8058058058058,392.6251229642705L472.82482482482493,390.3545535081142L473.84384384384384,388.18614515957995L474.8628628628628,386.12494407482217L475.8818818818819,384.17575429179186L476.9009009009008,382.34312537722775L477.91991991991995,380.63134066410464L478.93893893893886,379.0444061121002L479.957957957958,377.58603982213657L480.9769769769769,376.2596622344545L481.99599599599605,375.0683870379937L483.015015015015,374.01501281709295L484.034034034034,373.10201545967766L485.0530530530531,372.3315413491927L486.07207207207205,371.7054013605538L487.09109109109113,371.225065678352L488.1101101101101,370.8916594534426L489.1291291291292,370.70595931190076L490.1481481481481,370.6683907281302L491.1671671671672,370.77902627167543L492.18618618618615,371.03758473501875L493.2052052052052,371.44343114734636L494.2242242242242,371.99557767695194L495.2432432432432,372.69268542261193L496.2622622622623,373.53306709192606L497.2812812812813,374.51469056227415L498.30030030030036,375.6351833177006L499.31931931931933,376.8918377527094L500.3383383383383,378.2816173316435L501.3573573573574,379.8011635900312L502.3763763763763,381.4468039620279L503.3953953953954,383.21456041585736L504.41441441441435,385.1001588769785L505.43343343343344,387.0990394165725L506.45245245245246,389.20636718086644L507.4714714714715,391.4170440347963L508.4904904904905,393.7257208915588L509.5095095095094,396.12681069772214L510.52852852852857,398.6145020417639L511.54754754754754,401.18277335218335L512.5665665665665,403.8254076497L513.5855855855856,406.53600781650755L514.6046046046047,409.30801234410575L515.6236236236236,412.1347115198857L516.6426426426426,415.0092640113984L517.6616616616616,417.9247138061049L518.6806806806807,420.8740074633763L519.6996996996997,423.8500116346061L520.7187187187186,426.84553080649886L521.7377377377377,429.85332522192556L522.7567567567568,432.86612893218376L523.7757757757759,435.8766679340652L524.7947947947948,438.8776783448314L525.8138138138138,441.86192456801274L526.8328328328329,444.8222174028943L527.8518518518518,447.7514320506194L528.8708708708709,450.6425259700449L529.8898898898898,453.48855653680073L530.9089089089089,456.2826984594612L531.927927927928,459.0182609073051L532.946946946947,461.6887043048459L533.9659659659659,464.2876567491234L534.9849849849849,466.80893000669806L536.0040040040041,469.2465350483334L537.023023023023,471.5946970805338L538.0420420420421,473.84787003437657L539.061061061061,476.0007504734739L540.0800800800802,478.0482908843923L541.0990990990991,479.9857123144507L542.1181181181181,481.8085163235119L543.1371371371371,483.5124962181621L544.156156156156,485.0937475385475L545.1751751751752,486.5486777700837L546.1941941941941,487.8740152542867L547.2132132132132,489.0668172750725L548.2322322322321,490.1244772990392L549.2512512512513,491.04473135047095L550.2702702702703,491.82566350408257L551.2892892892893,492.46571048085434L552.3083083083083,492.96366533466835L553.3273273273273,493.3186802198711L554.3463463463464,493.53026823231284L555.3653653653653,493.5983043188696L556.3843843843844,493.5230252529276L557.4034034034033,493.3050286757805L558.4224224224225,492.94527120637815L559.4414414414414,492.44506562433315L560.4604604604604,491.8060771335587L561.4794794794794,491.03031871635255L562.4984984984985,490.1201455901665L563.5175175175176,489.0782487816801L564.5365365365365,487.907647835153L565.5555555555555,486.61168267433254L566.5745745745746,485.1940046394444L567.5935935935937,483.6585667229936L568.6126126126126,482.00961303022984L569.6316316316315,480.2516674922038L570.6506506506506,478.3895218613177L571.6696696696697,476.4282230211926L572.6886886886887,474.373059644491L573.7077077077076,472.22954823406786L574.7267267267267,470.00341858446035L575.7457457457458,467.7005987022618L576.7647647647648,465.3271992253639L577.7837837837837,462.8894973823687L578.8028028028027,460.39392053469265L579.8218218218219,457.8470293449828L580.8408408408408,455.2555006164403L581.8598598598599,452.6261098485174L582.8788788788788,449.9657135551832L583.8978978978979,447.2812313925689L584.9169169169169,444.579628143293L585.9359359359358,441.8678956051183L586.9549549549549,439.1530344318289L587.9739739739739,436.44203597431306L588.9929929929931,433.74186416980376L590.012012012012,431.05943752707867L591.031031031031,428.4016112551236L592.05005005005,425.7751595823532L593.0690690690692,423.1867583129358L594.088088088088,420.64296766610084L595.107107107107,418.150215443514L596.1261261261261,415.7147805688913L597.1451451451452,413.3427770429881L598.1641641641642,411.0401383559523L599.1831831831831,408.81260239776543L600.2022022022022,406.6656969061257L601.2212212212212,404.6047254896492L602.2402402402403,402.63475426268656L603.2592592592592,400.7605991263775L604.2782782782782,398.9868137287959L605.2972972972973,397.31767813518445L606.3163163163163,395.7571882373398L607.3353353353353,394.309045929192L608.3543543543543,392.9766500735395L609.3733733733734,391.7630882827466L610.3923923923925,390.67112953399925L611.4114114114114,389.70321763745073L612.4304304304304,388.8614655732769L613.4494494494494,388.14765071130563L614.4684684684685,387.5632109244999L615.4874874874874,387.1092416051568L616.5065065065065,386.7864935902497L617.5255255255255,386.5953719998878L618.5445445445446,386.5359359904116L619.5635635635635,386.60789942117947L620.5825825825825,386.8106324316497L621.6016016016016,387.14316392291954L622.6206206206206,387.6041849354603L623.6396396396398,388.1920529123923L624.6586586586586,388.9047968352787L625.6776776776777,389.74012321709176L626.6966966966967,390.69542293472625L627.7157157157156,391.7677788812049L628.7347347347347,392.9539744155502L629.7537537537537,394.25050258618904L630.7727727727728,395.653576101717L631.7917917917916,397.15913802088676L632.8108108108108,398.7628731317966L633.8298298298298,400.46021998846123L634.8488488488489,402.2463835712309L635.8678678678679,404.11634853591397L636.8868868868869,406.06489301493826L637.9059059059059,408.086602932473L638.9249249249249,410.17588679412535L639.943943943944,412.3269909106259L640.9629629629628,414.53401501383223L641.981981981982,416.7909282224111L643.001001001001,419.0915853137058L644.0200200200201,421.429743257566L645.0390390390389,423.7990779673034L646.058058058058,426.19320122245864L647.0770770770771,428.60567771769354L648.0960960960961,431.03004219189535L649.1151151151151,433.4598165914635L650.1341341341341,435.8885272217689L651.1531531531532,438.30972184091473L652.1721721721722,440.716986650195L653.191191191191,443.1039631360365L654.2102102102101,445.46436471872323L655.2292292292293,447.7919931638349L656.2482482482483,450.0807547130863L657.2672672672672,452.3246758921188L658.2862862862862,454.5179189537833L659.3053053053053,456.65479691654645L660.3243243243244,458.7297881588498L661.3433433433433,460.7375505315665L662.3623623623622,462.67293495209617L663.3813813813814,464.53099844514765L664.4004004004005,466.30701659685275L665.4194194194195,467.99649539053354L666.4384384384383,469.5951823942099L667.4574574574573,471.0990772717776L668.4764764764765,472.50444159169604L669.4954954954956,473.8078079090084L670.5145145145145,475.005988098553L671.5335335335334,476.0960809193242L672.5525525525526,477.0754787920813L673.5715715715717,477.9418737744942L674.5905905905906,478.6932627203384L675.6096096096095,479.32795161150466L676.6286286286286,479.8445590538689L677.6476476476477,480.2420189303666L678.6666666666667,480.51958220691927L679.6856856856856,480.6768178891793L680.7047047047046,480.71361313036664L681.7237237237238,480.63017249277806L682.7427427427428,480.427016367836L683.7617617617617,480.10497856181667L684.7807807807807,479.66520305663636L685.7997997997998,479.10913995728515L686.8188188188188,478.43854063966785L687.8378378378379,477.6554521147373L688.8568568568568,476.7622106268781L689.8758758758759,475.76143450652035L690.894894894895,474.65601629891603L691.9139139139138,473.44911419290213L692.9329329329329,472.144142775292L693.9519519519519,470.7447631382764L694.9709709709709,469.25487236887454L695.98998998999,467.6785924510493L697.009009009009,466.0202586125842L698.028028028028,464.2844071502062L699.047047047047,462.47576276773736L700.0660660660661,460.59922546323907L701.085085085085,458.65985700221205L702.1041041041041,456.66286701488747L703.1231231231232,454.6135987565228L704.1421421421421,452.5175145703755L705.1611611611611,450.38018109367715L706.1801801801802,448.2072542474687L707.1991991991991,446.0044640515751L708.2182182182182,443.77759930630407L709.2372372372373,441.5324921826423L710.2562562562562,439.2750027627951L711.2752752752752,437.0110035728723L712.2942942942943,434.7463641493598L713.3133133133132,432.4869356807527L714.3323323323323,430.2385357653253L715.3513513513514,428.0069333255269L716.3703703703704,425.797833718874L717.3893893893893,423.6168640844988L718.4084084084084,421.46955896368763L719.4274274274273,419.36134623182073L720.4464464464464,417.29753337809666L721.4654654654655,415.28329416830735L722.4844844844844,413.3236557247126L723.5035035035035,411.42348605576046L724.5225225225225,409.5874820670123L725.5415415415416,407.82015808316174L726.5605605605605,406.12583490949055L727.5795795795794,404.50862945949007L728.5985985985985,402.97244497368837L729.6176176176177,401.520961852984L730.6366366366366,400.15762912797885L731.6556556556556,398.88565658395413L732.6746746746746,397.708007559232L733.6936936936937,396.6273924327267L734.7127127127128,395.6462628145159L735.7317317317317,394.76680645126044L736.7507507507506,393.9909428562737L737.7697697697697,393.32031967200265L738.7887887887889,392.7563097706241L739.8078078078078,392.30000909640603L740.8268268268267,391.95223525141944L741.8458458458458,391.713526824138L742.864864864865,391.5841434584213L743.8838838838839,391.56406665835294L744.9029029029028,391.65300132240964L745.9219219219218,391.85037799846316L746.9409409409409,392.1553558491857L747.9599599599601,392.56682631553014L748.978978978979,393.08341746410935L749.9979979979979,393.70349900249613L751.017017017017,394.42518794471994L752.036036036036,395.24635490755344L753.055055055055,396.1646310165577L754.074074074074,397.17741539930216L755.093093093093,398.28188324169776L756.1121121121122,399.4749943819736L757.1311311311312,400.7535024155071L758.1501501501501,402.11396428247537L759.1691691691691,403.5527503091411L760.1881881881882,405.06605467252376L761.2072072072071,406.64990625723146L762.2262262262262,408.3001798723529L763.2452452452452,410.0126077955242L764.264264264264,411.78279161060374L765.2832832832833,413.6062143048004L766.3023023023023,415.4782525906185L767.3213213213213,417.3941894175985L768.3403403403403,419.34922663855133L769.3593593593595,421.338497794805L770.3783783783783,423.35708098490585L771.3973973973974,425.40001178123975L772.4164164164164,427.46229615916604L773.4354354354354,429.53892340348006L774.4544544544544,431.6248789573463L775.4734734734735,433.71515717926667L776.4924924924925,435.8047739741602L777.5115115115113,437.8887792652489L778.5305305305304,439.962269274138L779.5495495495495,442.0203985772745L780.5685685685686,444.0583919078395L781.5875875875876,446.0715556730906L782.6066066066065,448.05528915820526L783.6256256256256,450.00509538879135L784.6446446446447,451.9165916254139L785.6636636636637,453.78551946474073L786.6826826826826,455.6077545232274L787.7017017017016,457.3793156806367L788.7207207207207,459.0963738621199L789.7397397397398,460.7552603390711L790.7587587587586,462.35247453049277L791.7777777777777,463.88469128817974L792.7967967967968,465.3487676506378L793.8158158158159,466.7417490522856L794.8348348348349,468.06087497615704L795.8538538538538,469.30358404000316L796.8728728728728,470.4675185073927L797.8918918918919,471.5505282171262L798.910910910911,472.5506739259912L799.9299299299299,473.46623006160735L800.9489489489489,474.29568688382284L801.967967967968,475.0377520548293L802.986986986987,475.6913516198482L804.0060060060059,476.25563040191673L805.025025025025,476.72995181594274L806.044044044044,477.1138971088183L807.063063063063,477.4072640339616L808.0820820820821,477.61006497020406L809.1011011011011,477.7225244964394L810.1201201201201,477.74507643490983L811.1391391391392,477.67836037740454L812.158158158158,477.5232177100011L813.1771771771772,477.2806871532661L814.1961961961962,476.95199983606494L815.2152152152152,476.5385739222943L816.2342342342341,476.042008810944L817.2532532532532,475.4640789309271L818.2722722722723,474.80672715305883L819.2912912912913,474.07205784245104L820.3103103103103,473.26232957537866L821.3293293293292,472.3799475453965L822.3483483483484,471.42745568412033L823.3673673673674,470.4075285226372L824.3863863863862,469.32296281998583L825.4054054054053,468.1766689855219L826.4244244244245,466.9716623222969L827.4434434434435,465.7110541187796L828.4624624624624,464.39804261638744L829.4814814814814,463.03590388033416L830.5005005005004,461.62798260125976L831.5195195195196,460.17768285498204L832.5385385385385,458.68845884750533L833.5575575575574,457.1638056721258L834.5765765765765,455.60725010510805L835.5955955955957,454.02234146595663L836.6146146146147,452.41264256778396L837.6336336336335,450.78172078267465L838.6526526526525,449.1331392462797L839.6716716716717,447.4704482251315L840.6906906906908,445.79717666936966L841.7097097097097,444.1168239726946L842.7287287287286,442.43285196044405L843.7477477477477,440.74867712569863L844.7667667667669,439.0676631322885L845.7857857857858,437.39311360248706L846.8048048048047,435.7282652060466L847.8238238238237,434.076281066058L848.8428428428429,432.4402444959081L849.8618618618619,430.823153080367L850.8808808808808,429.22791311256395L851.8998998998998,427.65733439731963L852.918918918919,426.1141254299817L853.937937937938,424.60088895858513L854.956956956957,423.12011793581405L855.9759759759759,421.6741918658934L856.9949949949948,420.26537355018826L858.014014014014,418.8958062339402L859.0330330330331,417.56751115522775L860.052052052052,416.28238549590657L861.071071071071,415.04220073296915L862.0900900900901,413.84860138746797L863.109109109109,412.70310416687215L864.1281281281281,411.6070974954825L865.147147147147,410.5618414263173L866.1661661661661,409.5684679267004L867.1851851851852,408.6279815286452L868.2042042042042,407.74126033403167L869.2232232232232,406.90905736351993L870.2422422422421,406.1320022371442L871.2612612612613,405.41060317357955L872.2802802802802,404.74524929417834L873.2992992992993,404.1362132170362L874.3183183183182,403.58365392556925L875.3373373373373,403.08761989536765L876.3563563563563,402.6480524624399L877.3753753753754,402.2647894153762L878.3943943943943,401.93756879344L879.4134134134134,401.6660328721476L880.4324324324325,401.44973231751754L881.4514514514514,401.28813048985796L882.4704704704704,401.1806078777266L883.4894894894894,401.1264666425299L884.5085085085084,401.12493525413197L885.5275275275275,401.1751731978218L886.5465465465466,401.2762757330374L887.5655655655655,401.42727868435935L888.5845845845846,401.62716324548046L889.6036036036035,401.8748607771095L890.6226226226225,402.16925758009756L891.6416416416416,402.50919962546044L892.6606606606607,402.8934972234289L893.6796796796796,403.32092961417266L894.6986986986986,403.7902494634227L895.7177177177177,404.30018724684913L896.7367367367367,404.8494555077413L897.7557557557557,405.4367529732802L898.7747747747746,406.0607685154809L899.7937937937937,406.7201849437248L900.8128128128128,407.41368261667714L901.8318318318319,408.13994286231025L902.8508508508507,408.89765119570575L903.8698698698698,409.68550032530214L904.8888888888889,410.5021929392699L905.907907907908,411.3464442647411L906.9269269269269,412.216984393687L907.9459459459458,413.1125603703171L908.9649649649649,414.0319380359722L909.983983983984,414.9739036285861L911.003003003003,415.93726513490657L912.0220220220219,416.9208533947726L913.041041041041,417.9235229578585L914.0600600600601,418.9441526943971L915.0790790790791,419.98164616248624L916.098098098098,421.03493173565874L917.117117117117,422.10296249545684L918.1361361361361,423.1847158947842L919.1551551551553,424.2791931988242L920.1741741741741,425.3854187112845L921.1931931931931,426.50243879468127L922.2122122122122,427.6293206942811L923.2312312312312,428.76515117618857L924.2502502502502,429.9090349908911L925.2692692692692,431.0600931743536L926.2882882882882,432.21746119948136L927.3073073073073,433.38028699144854L928.3263263263264,434.5477288210103L929.3453453453453,435.718953090483L930.3643643643643,436.8931320275817L931.3833833833834,438.0694413027499L932.4024024024023,439.24705758599777L933.4214214214214,440.4251560595844L934.4404404404404,441.6029079031307L935.4594594594594,442.77947776793553L936.4784784784785,443.9540212573856L937.4974974974975,445.1256824304036L938.5165165165165,446.29359134485384L939.5355355355355,447.45686165774595L940.5545545545546,448.61458829891797L941.5735735735735,449.7658452346581L942.5925925925926,450.90968333743587L943.6116116116116,452.0451283775551L944.6306306306304,453.17117915212054L945.6496496496496,454.2868057662235L946.6686686686687,455.39094808070195L947.6876876876877,456.4825143402231L948.7067067067065,457.5603799947674L949.7257257257256,458.6233867268651L950.7447447447447,459.6703416961621L951.7637637637638,460.70001701205626L952.7827827827828,461.71114944426745L953.8018018018016,462.7024403802778L954.8208208208208,463.6725560376082L955.8398398398399,464.62012793789256L956.8588588588589,465.543753648661L957.8778778778777,466.4419977976695L958.8968968968968,467.3133933635052L959.9159159159159,468.156443245066L960.934934934935,468.9696221113591L961.9539539539538,469.75137853189494L962.9729729729729,470.50013738676654L963.991991991992,471.21430255431653L965.0110110110111,471.8922598730928L966.03003003003,472.53238037359955L967.0490490490489,473.1330237741544L968.068068068068,473.6925422339785L969.0870870870871,474.20928435547034L970.1061061061062,474.6815994264597L971.125125125125,475.1078418920998L972.1441441441441,475.48637604494496L973.1631631631632,475.81558092067803L974.1821821821821,476.0938553859033L975.2012012012011,476.3196234034065L976.2202202202202,476.49133945931334L977.2392392392392,476.60749413564855L978.2582582582583,476.6666198109213L979.2772772772773,476.6672964705317L980.2962962962962,476.6081576080237L981.3153153153153,476.4878961974923L982.3343343343344,476.3052707168025L983.3533533533532,476.05911120068316L984.3723723723723,475.74832530224137L985.3913913913914,475.3719043409833L986.4104104104103,474.92892931504696L987.4294294294294,474.4185768550401L988.4484484484484,473.84012509664404L989.4674674674675,473.1929594489778L990.4864864864865,472.4765782356437L991.5055055055055,471.6905981853654L992.5245245245244,470.8347597492066L993.5435435435435,469.9089322215158L994.5625625625626,468.91311864197655L995.5815815815814,467.84746045645926L996.6006006006005,466.7122419147633L997.6196196196196,465.5078941838171L998.6386386386387,464.2349991554526L999.6576576576576,462.8942929285042L1000.6766766766766,461.4866689456877L1001.6956956956956,460.01318076649375L1002.7147147147148,458.4750444581888L1003.7337337337337,456.8736405879387L1004.7527527527526,455.21051580005957L1005.7717717717717,453.48738396346823L1006.7907907907908,451.7061268755162L1007.8098098098098,449.8687945095822L1008.8288288288287,447.97760479503046L1009.8478478478477,446.0349429194397L1010.8668668668668,444.0433601443458L1011.885885885886,442.0055721271335L1012.9049049049049,439.92445674314024L1013.9239239239238,437.80305140350526L1014.9429429429429,435.6445498658004L1015.9619619619621,433.45229853600864L1016.980980980981,431.3044688785151L1017.9999999999999,431.3053456697995");
        
        // this.canvas_offscreen_layer.beginPath();
        // for(var i = 0; i != current_waveform_length; ++i)
        // {
        //   this.canvas_offscreen_layer.moveTo( self.x(current_waveform["time"][i]), self.y(current_waveform["value"][i]) );
        //   break;
        // }
        // for(var i = 1; i < current_waveform_length; ++i)
        // {
        //   this.canvas_offscreen_layer.lineTo( self.x(current_waveform["time"][i]), self.y(current_waveform["value"][i]) );
        // }

        p = new Path2D();
        for(var i = 0; i != current_waveform_length; ++i)
        {
          p.moveTo( self.x(current_waveform["time"][i]), self.y(current_waveform["value"][i]) );
          break;
        }
        for(var i = 1; i < current_waveform_length; ++i)
        {
          p.lineTo( self.x(current_waveform["time"][i]), self.y(current_waveform["value"][i]) );
        }
        paths.push(p);

        if (color_scale_and_color_array && self.options.color_array[ current_waveform["input-index"] ] !== null)
          strokeStyle = self.options.color_scale( self.options.color_array[ current_waveform["input-index"] ] );
        else
          strokeStyle = $("#color-switcher").colorswitcher("get_null_color");
        this.canvas_offscreen_layer.strokeStyle = strokeStyle;

        this.canvas_offscreen_layer.stroke(p);

        this.canvas_picker_layer.strokeStyle = intToRGB(current_waveform["input-index"]);
        this.canvas_picker_layer.stroke(p);

        // this.canvas_offscreen_layer.stroke();
      }
      // this.canvas_offscreen_layer.stroke();
      }
      // this.canvas_offscreen_layer.stroke();
      console.time('canvas drawImage');
      this.canvas_datum_layer.drawImage(this.canvas_offscreen, 0, 0);
      console.timeEnd('canvas drawImage');
      console.timeEnd('canvas render');

      // console.time('picker');
      // for(var j=0; j < paths.length; j++)
      // {
      //   this.canvas_picker_layer.stroke(paths[j]);
      // }
      // console.timeEnd('picker');
          

      waveformsContainer = this.visualization;

      var waveforms_update = waveformsContainer.selectAll("g.waveform")
        .data(waveform_subset, function(d){ return d["input-index"]; });

      var waveforms_exit = waveforms_update.exit().remove();

      var waveforms_enter = waveforms_update.enter()
        .append("svg:g")
        .attr("class", "waveform")
        ;

      var waveformsLength = waveforms_enter.size();
      if(waveformsLength > 0){
        self.waveformPie.trigger(
          'configure',
          {
            "max":waveformsLength,
          }
        );

        // Don't want the progress indicator showing up every time. Only if the delay is longer than 1 second.
        self.showWaveformPieContainerTimeout = setTimeout(function(){
          self.waveformPieContainer.show(0);
        }, 1000);

        // timedProcessArray(
        //   waveforms_enter.filter('g.waveform')[0], // Filtering out nulls and undefined elements by selecting only g.waveforms
        //   processWaveform, 
        //   finishedProcessingWaveforms
        //   );
        // previewWaveforms();
      }

      function timedProcessArray(items, process, callback){
        var timeout = 100; //how long to yield control to UI thread
        var todo = items.concat(); //create a clone of the original

        self.waveformProcessingTimeout = setTimeout(function(){
          var start = +new Date();
          do {
            process(todo.shift());
          } while (todo.length > 0 && (+new Date() - start < 50));

          if (todo.length > 0){
            self.waveformProcessingTimeout = setTimeout(arguments.callee, timeout);
          } else {
            callback(items);
          }

          self.waveformPie.val(waveformsLength - todo.length).trigger('change');
        }, timeout);
      }

      function processWaveform(waveform){
        d3.select(waveform).append("svg:path")
          .attr("d", self.make_sax_line())
          .style("display", "none")
          .style("stroke", function(d, i) { 
            if (self.options.color_scale != null && self.options.color_array != null && self.options.color_array[ d["input-index"] ] !== null)
              return self.options.color_scale( self.options.color_array[ d["input-index"] ] );
            else
              return $("#color-switcher").colorswitcher("get_null_color");
          })
          .style("stroke-dasharray", function(d,i){
            if (self.options.color_array != null && self.options.color_array[ d["input-index"] ] !== null)
              return null;
            else
              return self.options.nullWaveformDasharray;
          })
          .attr("class", "unselected")
          .on("click", function(d){
            if(d3.event.ctrlKey || d3.event.metaKey) {
              self.options.highlight.push(d['input-index']);
            } else {
              self.options.highlight = [d['input-index']];
            }
            self._select();
            self.element.trigger("waveform-selection-changed", [self.options.highlight]);
            d3.event.stopPropagation();
          })
          ;
      }

      function finishedProcessingWaveforms(){

        // Cancelling the timeout that was set to delay progress indicator display
        clearTimeout(self.showWaveformPieContainerTimeout);
        self.waveformPieContainer.hide();
        clearTimeout(self.previewWaveformsTimeout);
        
        self.visualization.selectAll("path").
          style("display", "block") // displaying the hidden paths
          ;
      }

      function previewWaveforms(timeout, maxIterations){
        if (timeout == null)
          timeout = 100
        if (maxIterations == null)
          maxIterations = 6;

        self.previewWaveformsTimeout = setTimeout( function(){
            self.visualization.selectAll("path").
              style("display", "block") // displaying the hidden paths
              ;

            maxIterations--;
            timeout = timeout * 2;

            if (maxIterations > 0) {
              self.previewWaveformsTimeout = setTimeout(arguments.callee, timeout);
            }
        }, timeout );
      }

      this.make_sax_line = function()
      {
        var self = this;
        return function(d)
        {

          result = "";

          // Commenting out decimation while we wait to find a better approach to this 
          var multiplier = 1;
        	// // Adding downsampling decimation based on panel width
        	// var samples = d["time"].length;
        	// var panelWidth = $("#waveform-viewer")[0].getBoundingClientRect().width;
        	// var multiplier = Math.ceil( (samples / panelWidth) * 4 );
        	// if(multiplier < 1)
          //   multiplier = 1;
          
        	//console.log("multiplier: " + multiplier);
          for(var i = 0; i != d["time"].length; ++i)
          {
            result += "M" + self.x(d["time"][i]) + "," + self.y(d["value"][i]);
            break;
          }
          //for(var i = 1; i < d["time"].length; ++i)
          for(var i = 1; i < d["time"].length; i+=multiplier)
          {
            result += "L" + self.x(d["time"][i]) + "," + self.y(d["value"][i]);
          }

          return result;
        }
      }
    },

    /* Highlights waveforms */
    _select: function()
    {
      var self = this;

      // Only highlight a waveform if it's part of the current selection
      var selection = self.options.selection;
      var highlight = self.options.highlight;
      var inCurrentSelection = [];
      for(var i=0; i<highlight.length; i++){
        if( selection.indexOf(highlight[i]) > -1 ){
          inCurrentSelection.push(highlight[i]);
        }
      }
      highlight = inCurrentSelection;

      var waveform_subset = [];
      for(var i=0; i<highlight.length; i++)
      {
        var node_index = highlight[i];
        if(node_index < self.waveforms.length)
          waveform_subset.push(self.waveforms[node_index]);
      }

      this.container.selectAll("g.selection").remove();
      this.container.selectAll("rect.selectionMask").remove();

      if(highlight.length > 0) {
        this.visualization.append("svg:rect")
          .attr("width", this.diagram_width)
          .attr("height", this.diagram_height)
          .attr("pointer-events", "none")
          .style("fill", $("#color-switcher").colorswitcher("get_background").toString() )
          .style("fill-opacity", $("#color-switcher").colorswitcher("get_opacity") )
          .attr("class", "selectionMask")
          ;
      }

      var waveforms = this.visualization.selectAll("g.selection")
        .data(waveform_subset, function(d){ return d["input-index"]; })
      .enter().append("svg:g")
        .attr("class", "selection");

      waveforms.append("svg:path")
        .attr("d", this.make_sax_line())
        .style("stroke", function(d, i) { 
          if (self.options.color_scale != null && self.options.color_array != null && self.options.color_array[ d["input-index"] ] !== null)
            return self.options.color_scale( self.options.color_array[ d["input-index"] ] );
          else
            return $("#color-switcher").colorswitcher("get_null_color");
        })
        .style("stroke-dasharray", function(d,i){
          if (self.options.color_array != null && self.options.color_array[ d["input-index"] ] !== null)
            return null;
          else
            return self.options.nullWaveformDasharray;
        })
        .attr("class", "highlight")
        .on("click", function(d){
          if(d3.event.ctrlKey || d3.event.metaKey) {
            var index = self.options.highlight.indexOf(d['input-index']);
            if (index > -1) {
              self.options.highlight.splice(index, 1);
            }
          } else {
            self.options.highlight = [d['input-index']];
          }
          self._select();
          self.element.trigger("waveform-selection-changed", [self.options.highlight]);
          d3.event.stopPropagation();
        })
        ;
    },

    _stopProcessingWaveforms: function()
    {
      var self = this;
      // Cancel any previously started work
      clearTimeout(self.waveformProcessingTimeout);
      clearTimeout(self.previewWaveformsTimeout);
      clearTimeout(self.showWaveformPieContainerTimeout);
      self.waveformPieContainer.hide();
    },

    _set_color: function()
    {
      var self = this;

      // No use coloring waveforms if none exist, for example, during initial creation of waveform plot
      if(this.container.selectAll("g.waveform path, g.selection path.highlight").pop().length > 0){
        this.container.style("display", "none");
        // Coloring both the standard waveforms (g.waveform path) and the ones used to show selected simulations (g.selection path.highlight)
        timedColorWaveforms(this.container.selectAll("g.waveform path, g.selection path.highlight").pop(), colorWaveform, finishedColoringWaveforms);
      }

      function timedColorWaveforms(items, process, callback){
        var timeout = 100; //how long to yield control to UI thread
        var todo = items.concat(); //create a clone of the original

        self.waveformProcessingTimeout = setTimeout(function(){
          var start = +new Date();
          do {
            process(todo.shift());
          } while (todo.length > 0 && (+new Date() - start < 50));

          if (todo.length > 0){
            self.waveformProcessingTimeout = setTimeout(arguments.callee, timeout);
          } else if (callback != null) {
            callback(items);
          }
        }, timeout);
      }

      function colorWaveform(waveform){
        d3.select(waveform)
          .style("stroke", function(d, i) { 
            if (self.options.color_scale != null && self.options.color_array != null && self.options.color_array[ d["input-index"] ] !== null)
              return self.options.color_scale( self.options.color_array[ d["input-index"] ] );
            else
              return $("#color-switcher").colorswitcher("get_null_color");
          })
          .style("stroke-dasharray", function(d,i){
            if (self.options.color_array != null && self.options.color_array[ d["input-index"] ] !== null)
              return null;
            else
              return self.options.nullWaveformDasharray;
          })
        ;
      }

      function finishedColoringWaveforms(){

        self.container.style("display", "block");
        
      }
    },

    resize_canvas: function()
    {
      this.container.selectAll("g.waveform").remove();
      this.container.selectAll("g.selection").remove();
      this.container.selectAll("rect.selectionMask").remove();
        
      this.width = $("#waveform-pane").width();
      this.height = $("#waveform-pane").height();
      this.diagram_width = this.width - this.padding_left - this.padding_right;
      this.diagram_height = this.height - this.padding_top - this.padding_bottom;
      this.rect.attr({width: this.diagram_width, height: this.diagram_height});
      this._set_visible();
      this._select();
    },

    _setOption: function(key, value)
    {
      //console.log("timeseries.waveform._setOption()", key, value);
      this.options[key] = value;

      if(key == "selection")
      {
        this._set_visible();
      }
      else if(key == "highlight")
      {
        this._select();
      }
      else if(key == "color-options")
      {
        this.options.color_array = value.color_array;
        this.options.color_scale = value.color_scale;
        this._set_color();
      }
      else if(key == "color_scale")
      {
        this._set_color();
      }
      else if(key == "waveforms")
      {
        this.container.selectAll("g.waveform").remove();
        this.container.selectAll("g.selection").remove();
        this.container.selectAll("rect.selectionMask").remove();

        this.options.waveforms = value.waveforms;
        // Setting selection to all if it's undefined
        if(value.selection === undefined) {
          visible = [];
          for(var i=0; i<this.options.waveforms.length; i++) {
            visible.push(this.options.waveforms[i]["input-index"]);
          }
          this.options.selection = visible;
        } else {
          this.options.selection = value.selection;
        }

        // Only setting new highlight if one was passed in. Otherwise, leaving the existing one, just like the table does.
        if(value.highlight !== undefined)
          this.options.highlight = value.highlight;

        this._set_visible();
        this._select();
      }
    },
  });

});
